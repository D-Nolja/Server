<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.dang.dnolja.review.model.mapper.ReviewMapper">

    <insert id="insertDailyToSpot" parameterType="map">
        INSERT INTO Review (daily_id, spot_id, `order`) VALUES (#{dailyId}, #{spotId}, #{order})
    </insert>


    <update id="updateReviewItem" parameterType="com.dang.dnolja.review.controller.dto.request.ReviewItemRequest">
        update Review
        set img = #{img}, contents=#{contents}
        where review_id = #{reviewId}
    </update>

    <select id="getUserId" parameterType="long" resultType="long">
        select P.user_id
        From Plan P
                 JOIN Daily D ON P.plan_id = D.plan_id
                 JOIN Review R ON R.daily_id = D.daily_id
        where R.review_id = #{reviewId};
    </select>


    <select id="getReviewDetailList" parameterType="map" resultType="com.dang.dnolja.review.model.dto.ReviewDetailDto">
        SELECT r.review_id as reviewId, r.`order`, s.spot_id as spotId, s.name, s.type1 as category, s.type2 as type, s.x, s.y,  r.contents, r.img
        FROM Daily d
                 JOIN Review r ON d.daily_id = r.daily_id
                 JOIN Spot s ON r.spot_id = s.spot_id
        WHERE d.plan_id = #{planId} and d.day_num = #{day};
    </select>

    <select id="findPlanReviewById" parameterType="long" resultType="com.dang.dnolja.review.model.dto.PlanReview">
        select u.nick_name as userName, p.plan_id as planId, u.user_id as userId,
               p.title, `start` , `end`, p.created_at as createdAt, p.modified_at as modifiedAt,
               p.review_title as mainTitle, p.review_img as mainImg, p.review_contents as mainContents
        from Plan p
                 JOIN Users u on p.user_id = u.user_id
        where p.plan_id = #{planId}
    </select>


    <update id="updateReviewMetaData" parameterType="com.dang.dnolja.review.controller.dto.request.ReviewPostRequest">
        update Plan
        set review_title = #{reviewTitle}, review_contents=#{mainContents}, review_img=#{mainImg}
        where plan_id = #{planId}
    </update>


    <select id="getList" parameterType="map" resultType="com.dang.dnolja.review.model.dto.ReviewMetaData">
        select p.plan_id as planId, p.user_id as userId, u.nick_name as userName,
               p.review_title as reviewTitle, p.review_img as mainImg,
               p.start, p.end, p.created_at as createdAt, p.modified_at as modifiedAt
        from Plan p
        JOIN Users u on u.user_id = p.user_id
        <where>
            <include refid="search"></include>
        </where>
        order by p.plan_id
        limit #{start}, #{sizePerPage}
    </select>

    <sql id="search">
            and review_title is not null
        <if test="keyWord != null and keyWord != ''">
            and title like concat('%', #{keyWord}, '%')
        </if>
        <if test="userId != null and userId!=''">
            and p.user_id = #{userId}
        </if>
    </sql>

    <select id="getTotalReviewCount" parameterType="map" resultType="int">
        select count(plan_id)
        from Plan p
        <where>
            <include refid="search"></include>
        </where>
    </select>

    <delete id="deleteByDailyId" parameterType="long">
        DELETE
        FROM Review
        WHERE daily_id=#{dailyId}
    </delete>

</mapper>
